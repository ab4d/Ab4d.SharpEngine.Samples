#version 450

layout(push_constant, std430) uniform postProcessSetup
{
    float hueOffset;
    float saturationFactor;
    float brightnessFactor;
} pushConstants;

layout(set = 1, binding = 0) uniform sampler2D inputTexture;

layout(location = 0) in vec2 inUV;
layout(location = 0) out vec4 outColor;

vec3 rgb2hsv(vec3 c)
{
    vec4 K = vec4(0.0, -0.3333333432674407958984375, 0.666666686534881591796875, -1.0);
    vec4 p = mix(vec4(c.zy, K.wz), vec4(c.yz, K.xy), vec4(step(c.z, c.y)));
    vec4 q = mix(vec4(p.xyw, c.x), vec4(c.x, p.yzx), vec4(step(p.x, c.x)));
    float d = q.x - min(q.w, q.y);
    float e = 1.0000000133514319600180897396058e-10;
    return vec3(abs(q.z + ((q.w - q.y) / ((6.0 * d) + e))), d / (q.x + e), q.x);
}

vec3 hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 0.666666686534881591796875, 0.3333333432674407958984375, 3.0);
    vec3 p = abs((fract(c.xxx + K.xyz) * 6.0) - K.www);
    return mix(K.xxx, clamp(p - K.xxx, vec3(0.0), vec3(1.0)), vec3(c.y)) * c.z;
}

void main()
{
    vec4 color = texture(inputTexture, inUV);
    vec3 param = color.xyz;
    vec3 hsv = rgb2hsv(param);
    hsv = vec3(hsv.x + pushConstants.hueOffset, hsv.y * pushConstants.saturationFactor, hsv.z * pushConstants.brightnessFactor);
    vec3 param_1 = hsv;
    vec3 rgb = hsv2rgb(param_1);
    outColor = vec4(clamp(rgb, vec3(0.0), vec3(1.0)), color.w);
}

