#version 450

struct FogMaterial
{
    vec4 diffuseColor;
    float fogStart;
    float fogFullColorStart;
    vec3 fogColor;
};

struct Light
{
    vec3 pos;
    float phi;
    vec3 dir;
    float theta;
    vec3 diffuse;
    float falloff;
    vec3 spec;
    vec3 att;
    float range;
};

layout(set = 3, binding = 0, std430) readonly buffer FogMaterialsBuffer
{
    FogMaterial materials[];
} materialsBuffer;

layout(set = 0, binding = 0, std140) uniform sceneUniformBuffer
{
    mat4 viewProjection;
    vec3 eyePosW;
    vec2 viewSize;
    float dpiScale;
    float superSampling;
    vec3 ambientColor;
    int dirLightStart;
    int dirLightCount;
    int pointLightStart;
    int pointLightCount;
    int spotLightStart;
    int spotLightCount;
} scene;

layout(set = 1, binding = 0, std430) readonly buffer AllLightsBuffer
{
    Light allLights[];
} allLightsBuffer;

layout(push_constant, std430) uniform indexSetup
{
    layout(offset = 4) int materialIndex;
} pushConstants;

layout(location = 1) in vec3 inNormalW;
layout(location = 0) in vec3 inPosW;
layout(location = 0) out vec4 outColor;
layout(location = 2) in vec2 inUV;

void main()
{
    int usedMaterialIndex = abs(pushConstants.materialIndex);
    FogMaterial material;
    material.diffuseColor = materialsBuffer.materials[usedMaterialIndex].diffuseColor;
    material.fogStart = materialsBuffer.materials[usedMaterialIndex].fogStart;
    material.fogFullColorStart = materialsBuffer.materials[usedMaterialIndex].fogFullColorStart;
    material.fogColor = materialsBuffer.materials[usedMaterialIndex].fogColor;
    vec4 diffuseColor = material.diffuseColor;
    float multiplyNormal = float(sign(pushConstants.materialIndex));
    vec3 normal = normalize(inNormalW) * multiplyNormal;
    vec3 toEye = normalize(scene.eyePosW - inPosW);
    vec3 finalDiffuseColor = vec3(0.0);
    Light oneLightInfo;
    for (int iDir = 0; iDir < scene.dirLightCount; iDir++)
    {
        int _102 = iDir + scene.dirLightStart;
        oneLightInfo.pos = allLightsBuffer.allLights[_102].pos;
        oneLightInfo.phi = allLightsBuffer.allLights[_102].phi;
        oneLightInfo.dir = allLightsBuffer.allLights[_102].dir;
        oneLightInfo.theta = allLightsBuffer.allLights[_102].theta;
        oneLightInfo.diffuse = allLightsBuffer.allLights[_102].diffuse;
        oneLightInfo.falloff = allLightsBuffer.allLights[_102].falloff;
        oneLightInfo.spec = allLightsBuffer.allLights[_102].spec;
        oneLightInfo.att = allLightsBuffer.allLights[_102].att;
        oneLightInfo.range = allLightsBuffer.allLights[_102].range;
        vec3 lightVec = -oneLightInfo.dir;
        float diffuseFactor = dot(lightVec, normal);
        if (diffuseFactor > 0.0)
        {
            finalDiffuseColor = oneLightInfo.diffuse * diffuseFactor;
        }
    }
    finalDiffuseColor = clamp(finalDiffuseColor + scene.ambientColor, vec3(0.0), vec3(1.0)) * diffuseColor.xyz;
    float distanceW = length(scene.eyePosW - inPosW);
    float fogFactor = clamp((distanceW - material.fogStart) / (material.fogFullColorStart - material.fogStart), 0.0, 1.0);
    finalDiffuseColor = mix(finalDiffuseColor, material.fogColor, vec3(fogFactor));
    outColor = clamp(vec4(finalDiffuseColor, diffuseColor.w), vec4(0.0), vec4(1.0));
}

